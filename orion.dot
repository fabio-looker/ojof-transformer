# Warning:  This file is programatically generated (Your changes will be overwritten)
# Orion by Fabio
# Generator v<<:x.generator.v>> (<<:x.generator.date>>)
# Generated on <<:(new Date()).toISOString().slice(0,10)>>

<<! var paths = x.views.filter(v=>!v.weak).map(view=>recurPaths({view})).reduce(flatten,[]); >>
<<! var codims = x.views.filter(()=>!"TODO"); >>

<<* x.views :view:v>>
	view: tbl_<<:view._view>> {
		<<?view.sql_table_name>>
		sql_table_name:<<:view.sql_table_name>>;;
		<<?>>
		<<?view.derived_table>>
		derived_table:{
			<<?view.derived_table.sql>>sql: <<:view.derived_table.sql>>;;<<?>>
		}
		<<?>> 
	}
<<*>>
<<* x.views.filter(v=>!v.weak) :view:v>>
	view: dyn_<<:view._view>> {
		derived_table: {
			sql:
				SELECT NULL as x
				<<* paths :path:p >>
					<<* (path.view.dimensions||[]).filter(isPure) :dim:d>>
					{% if fld_<<:path.name>>.<<:dim._dimension>>._in_query %}
					, ${sub_<<:path.name>>.<<:dim._dimension>>} as <<:path.name>>___<<:dim._dimension>>
					{%endif%}
					<<*>>
					<<* (path.view.dimension_groups||[]).filter(isPure) :dimgroup:dg>>
					<<* dimgroup.timeframes :timeframe:tf>>
					{% if fld_<<:path.name>>.<<:dimgroup._dimension_group>>_<<:timeframe>>._in_query %}
					, ${sub_<<:path.name>>.<<:dimgroup._dimension_group>>_<<:timeframe>>} as <<:path.name>>___<<:dimgroup._dimension_group>>_<<:timeframe>>
					{%endif%}
					<<*>>
					<<*>>
				<<*>>
				FROM ${tbl_<<:view._view>>.SQL_TABLE_NAME} as sub_<<:view._view>>
				<<* paths :path:p >>
				<<? path.priorView && path.rootView == view >>
				 
				{%if <<:path.name>>._in_query %}
				-- This is ok for now, but when we want to select a codim from a subquerys 
			 	-- dim table, we will have to implement the "left and right" logic (pplus looking up the right 
				-- from the codim definition)
				LEFT JOIN ${tbl_<<:path.view._view>>.SQL_TABLE_NAME} as sub_<<:path.name>>
				<<! let rel = equijoin(
						path.view.primary_keys, pk=>pk._primary_key, "pk",
						path.priorView.foreign_keys, fk=>fk.to||fk._foreign_key, "fk"
				)[0];>>
				<<* coerceArray(rel.pk.sql) :sql:s>>
					<<?s>>AND<<??>>ON<<?>> <<:sql.replace(/\$\{TABLE\}/g,path.name)>>
					= <<:(''+coerceArray(rel.fk.sql)[s]).replace(/\$\{TABLE\}/g,path.priorName)>>
				<<*>>
				{% endif %}
				<<?>>
				<<*>>
			;;
		}
	}
<<*>>
<<* paths :path:p>>
	view: fld_<<:path.name>> {
		label: "<<:path.label>>"
		<<* path.dimensions :dim:d>>
		dimension: <<:dim._dimension>> {sql:<:path.rootView._view>.<:path.name>___<:dim._dimension>;;}
		<<*>>
	}
	view: sub_<<:path.name>> {
		
	}
<<*>>
view: all_the_things {sql_table_name:(SELECT x FROM (SELECT NULL as x) WHERE x IS NOT NULL);;}
explore: all_the_things {
		#JOIN dynamic SQL views
		<<* x.views.filter(v=>!v.weak) :view:v>>
		join: <<:view._view>> {
			from: dyn_<<:view._view>>
			relationship: one_to_one
			type: full_outer
			<<! let rels = equijoin(
					view.primary_keys, pk=>pk._primary_key, "pk",
					x.views.filter(v=>!v.weak), fk=>fk.to||fk._foreign_key, "fk"
			);>>
			sql_on: FALSE ;;
		}
		<<*>>
		 
		#JOIN field views
		<<* paths :path:p>>
			join: fld_<<:path.name>> {
				sql:--Fields from fld_<<:path.name>>;;
			}
			join: sub_<<:path.name>> {
				sql: ;;
			}
		<<*>> 
	}

<<! function recurPaths({
		view,
		name = view._view,
		label = view.label||name2label(view._view),
		depth = 6, rootView = view,
		priorName, priorView
	}){
		if(depth<0){return [];}
		return ([{view, name, label, priorView, priorName, rootView}]
				.concat(
						equijoin(
								coerceArray(view.foreign_keys), fk=>fk.to||fk._foreign_key, "fk",
								coerceArray(x.views), get("primary_keys.0._primary_key"), "fView"
							)
						.map(({fk,fView})=>recurPaths({
								view: fView,
								priorView: view,
								priorName: name,
								name: [name].concat(fk.as||fView._view).join("__"),
								label: [label].concat(
										fk.label
										|| name2label(fk.as)
										|| !fView.weak && name2label(fk._foreign_key)
										|| []
									).join(" > "),
								depth:depth-1,
								rootView
							}))
						.reduce(flatten,[])
					)
			);
	};
function equijoin(arrL,keyL,asL,arrR,keyR,asR){
		const idx = arrL.reduce(
				(idx, objL) =>
						keyL(objL) === undefined
						?idx
						:idx.set(keyL(objL), [...(idx.get(keyL(objL))||[]), ...[objL]])
				,new Map
			);
 		const matches =
				arrR
				.map(objR =>
						keyR(objR) === undefined
						? []
						: (idx.get(keyR(objR))||[])
								.map(objL => ({[asL]:objL, [asR]:objR}))
								.reduce((a,b)=>a.concat(b),[])
					)
				.reduce((a,b)=>a.concat(b),[]);
		return matches
};
function coerceArray(x){
		if(x == undefined){return []}
		return [].concat(x)
	};
function name2label(str){return str==undefined?undefined:str.replace?str.replace(/(^|_)+([A-Za-z])/g,(...m)=>((m[1]&&" ")+m[2].toUpperCase())):undefined;};
function get(path) {
		if (!(path instanceof Array)) {path = path.split(".")}
		return obj=>{
				if (path.length <= 0) {return undefined}
				var validPath = true;
				var retval = obj;
				var mut_path = path.slice();
				while (mut_path.length > 0) {
						retval = retval[mut_path.shift()];
						if (retval === undefined) {return undefined}
					}
				return retval
			}
	};
function flatten(a,b){return a.concat(b);};
function isPure(field){
		return !(field.sql || "${TABLE}."+field["_"+field._type]).includes("${[a-z]+\.")
	};
>>
